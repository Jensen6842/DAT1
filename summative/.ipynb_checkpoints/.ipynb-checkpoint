{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 1: Data Science Process (25 marks)\n",
    "\n",
    "EnergiseMe is a Yorkshire company which, since its establishment in 1974 in York, UK, produces and trades natural energy drinks in more than 50 countries worldwide. Compared to the typical energy drinks on the market (e.g., Monster, Red Bull), the products of EnergiseMe offer equivalent amounts of energy (hence providing mental and physical stimulation), but without the heaps of sugar, artificial sweeteners and colourings. Some of its most well-known products are LukoMade, Tiger Matcha and GojiBeri. \n",
    "\n",
    "EnergiseMe has produced a new natural energy drink named PowerHerb, whose main ingredients are Indian gooseberry, green coffee, and green tea. Initial tests carried out using a small number of tasters have shown promising results. Based on these results, EnergiseMe is considering to proceed with producing.\n",
    "\n",
    "During a planning meeting that involved key stakeholders of the company, including the heads of the Marketing and Customer Service departments, the lead of Product Design team, the head of the Product Line team, and, you, as the head of the Data Science team, the following opinions were raised:\n",
    "\n",
    "* \"Since we are a Yorkshire-based company, the launch of our new product PowerHerb should happen here in York. Doing this will give a boost to York's economy\".\n",
    "\n",
    "* \"As a company that produces natural energy drinks, we should produce a PowerHerb Zero Sugar and a PowerHerb with stevia (a natural sweetener). Each product's variant should come in two different flavours (e.g., berries and orange) to satisfy our customer base\".\n",
    "\n",
    "* \"Since Indian gooseberry is one of the main ingredients of PowerHerb and this ingredient is particularly famous in Asia, we should consider producing and selling PowerHerb in Asia too\".\n",
    "\n",
    "* \"Although Brexit has already taken place and additional taxes will be imposed on our products imported in certain European countries, we should not change our pricing policy and should keep the price of our new product at a maximum 10% higher than all our other products. Although we will have a smaller profit, PowerHerb would have more chance of penetrating the European market\".\n",
    "\n",
    "Despite these opinions looking plausible, the CEO of EnergiseMe has given you Â£20000 (as a budget) and one month to investigate these ideas and establish their validity by implementing a data science project.\n",
    "\n",
    "**(i)\t[20 marks]** Using no more than **three** sentences for each data science lifecycle step, describe how you would implement this project to provide conclusive answers regarding the validity of these ideas. You can use examples, fictional data or plots to explain your arguments. \n",
    "\n",
    "**(ii) [5 marks]** Provide details of **two** ethics-related concerns that should be considered when carrying out this data science project. Use no more than **two** sentences per ethical concern."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Answer\n",
    "\n",
    "* Launching in York will boost York's economy\n",
    "* Two different flavours to satisfy the customer base\n",
    "* Consider producing and selling in Asia\n",
    "* Keep European prices maximum 10% higher than other products to increase chance of penetrating the European market\n",
    "\n",
    "### i)\n",
    "#### Identify Question\n",
    "\n",
    "The questions are whether launching in York will boost York's economy, whether two different flavours would satisfy the customer base, whether we should consider producing and selling in Asia and whether we should set the price to a maximum of 10% higher than our other products to increase our chance of penetrating the European market. So, the main questions where to sell the product and for how much.\n",
    "\n",
    "#### Collect Raw Data\n",
    "\n",
    "We need to identify the data sources (e.g., databases) in which existing data is stored and establish several characteristics about the data sources (e.g., how accurate they are). Also, we need to develop (ideally automated) procedures to retrieve this data from the data sources in a robust and reliable manner. Examples of data that can be collected include: other public launches in York, current product prices, public data on sales in Asia, customer satisfaction etc.  \n",
    "\n",
    "#### Process Data\n",
    "\n",
    "We need to put data into appropriately formatted dataframes and give each column a consistent name. If data have come from different data sources (e.g., databases) there might be a need to homogenise the data. This might include transforming data types in the same format, clean columns that have consistently reduntant information or merging columns that have the same information\n",
    "\n",
    "#### Explore Data\n",
    "\n",
    "Compute descriptive statistics (measures of central tendency and dispersion) and determine a set of effective visualisation artifacts for the collected data. Using this information, identify patterns in data and explore what can be learnt from these patterns. All these information should be correlated with the product.\n",
    "\n",
    "#### Model/Analyse Data\n",
    "\n",
    "A type of machine learning model is to provide a suggestion using a linear regression model. Another type of machine learning model is clustering. The outcomes of the models should be counterchecked.\n",
    "\n",
    "#### Communicate/Visualise Data\n",
    "\n",
    "Validate or back up the data. Then, use hypothesis testing to predict\n",
    "\n",
    "### ii)\n",
    "\n",
    "#### Privacy and Data Governance\n",
    "It is important to collect, store and maintain the collected data securely but also to preserve the privacy of the individuals reflected on this data. If the data would be used to train machine learning models, their consent to do this should be given before doing so, giving them also the option to opt out if they do not want their data to be used in this manner."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question2: Data Analysis [25 marks]\n",
    "\n",
    "The Yorkshire BeeKeepers Association collects data for the honey produced by its members each year and the average price per kilo (KG) for which the honey was sold to distribution companies. This data is available in the file named \"honeyProduction.csv\".\n",
    "\n",
    "You should use the dataset named \"honeyProduction.csv\" and answer the following data questions using Python 3, Pandas, NumPy and Matplotlib."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(i) [5 marks]** Compute measures of central tendency (mean, median) and dispersion (range, standard deviation.) Also, for each variable calculate its interquartile range. You **must** show your calculations. You **must not** use the describe() function of Pandas for the calculations but you **may** use it to check your results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Imports\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy.stats as stats\n",
    "from sklearn import linear_model\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.metrics import mean_absolute_error as mae\n",
    "from sklearn.metrics import mean_squared_error  as mse"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean year of honey is 2008\n",
      "The mean production of honey is 1011.48 [raw: 1011.4815999999998]\n",
      "The mean price per KG of honey is 0.59 [raw: 0.5932000000000001]\n"
     ]
    }
   ],
   "source": [
    "#Write your answer here: Mean\n",
    "honey = pd.read_csv(\"honeyProduction.csv\")\n",
    "\n",
    "yearMean = honey['Year'].mean()\n",
    "productionMean = honey['Production'].mean()\n",
    "priceMean = honey['Price'].mean()\n",
    "\n",
    "print(\"The mean year is\", round(yearMean))\n",
    "print(\"The mean production of honey is\", round(productionMean,2), \"[raw:\", str(productionMean) + \"]\")\n",
    "print(\"The mean price per KG of honey is\", round(priceMean,2), \"[raw:\", str(priceMean) + \"]\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The median year of honey is 2008\n",
      "The median production of honey is 1012.22\n",
      "The median price per KG of honey is 0.59\n"
     ]
    }
   ],
   "source": [
    "#Write your answer here: Median\n",
    "yearMedian = honey['Year'].median()\n",
    "productionMedian = honey['Production'].median()\n",
    "priceMedian = honey['Price'].median()\n",
    "\n",
    "print(\"The median year is\", round(yearMedian))\n",
    "print(\"The median production of honey is\", productionMedian)\n",
    "print(\"The median price per KG of honey is\", priceMedian)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The range of the year is 24\n",
      "The range of the production of honey is 7.26 [raw: 7.259999999999991]\n",
      "The range of the price per KG of honey is 0.49\n"
     ]
    }
   ],
   "source": [
    "#Write your answer here: Range\n",
    "yearRange = honey['Year'].max() - honey['Year'].min()\n",
    "productionRange = honey['Production'].max() - honey['Production'].min()\n",
    "priceRange = honey['Price'].max() - honey['Price'].min()\n",
    "\n",
    "print(\"The range of the year is\", round(yearRange))\n",
    "print(\"The range of the production of honey is\", round(productionRange,2), \"[raw: \" + str(productionRange) + \"]\")\n",
    "print(\"The range of the price per KG of honey is\", priceRange)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The standard deviation of the year is 7 [raw: 7.359800721939872]\n",
      "The standard deviation of the production of honey is 2.87 [raw: 2.873799285498789]\n",
      "The standard deviation of the price per KG of honey is 0.16 [raw: 0.15899999999999997]\n"
     ]
    }
   ],
   "source": [
    "#Write your answer here: Standard deviation\n",
    "yearStd = honey['Year'].std()\n",
    "productionStd = honey['Production'].std()\n",
    "priceStd = honey['Price'].std()\n",
    "\n",
    "print(\"The standard deviation of the year is\", round(yearStd), \"[raw: \" + str(yearStd) + \"]\")\n",
    "print(\"The standard deviation of the production of honey is\", round(productionStd,2), \"[raw:\", str(productionStd) + \"]\")\n",
    "print(\"The standard deviation of the price per KG of honey is\", round(priceStd,2), \"[raw:\", str(priceStd) + \"]\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The IQR of the year is 12.0\n",
      "The IQR of the production of honey is 5.88 [raw: 5.8799999999999955]\n",
      "The IQR of the price per KG of honey is 0.26 [raw: 0.25999999999999995]\n"
     ]
    }
   ],
   "source": [
    "#Write your answer here: IQR\n",
    "yearIQR = honey['Year'].quantile(0.75) - honey['Year'].quantile(0.25)\n",
    "productionIQR = honey['Production'].quantile(0.75) - honey['Production'].quantile(0.25)\n",
    "priceIQR = honey['Price'].quantile(0.75) - honey['Price'].quantile(0.25)\n",
    "\n",
    "print(\"The IQR of the year is\", round(yearIQR))\n",
    "print(\"The IQR of the production of honey is\", round(productionIQR,2), \"[raw:\", str(productionIQR) + \"]\")\n",
    "print(\"The IQR of the price per KG of honey is\", round(priceIQR,2), \"[raw:\", str(priceIQR) + \"]\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(ii) [2 marks]** Calculate the Pearsonâs and Spearman's correlation coefficients between Production and Price."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pearson r: 0.5526\n",
      "Spearman r: 0.5756\n"
     ]
    }
   ],
   "source": [
    "#Write your answer here\n",
    "pearson = stats.pearsonr(honey['Production'], honey['Price'])\n",
    "spearman = stats.spearmanr(honey['Production'], honey['Price'])\n",
    "\n",
    "print (\"Pearson r: %.4f\" % (pearson[0]))\n",
    "print (\"Spearman r: %.4f\" % (spearman[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(iii) [3 marks]** Visualise the dataset as a scatter plot using the Matplotlib library in Python. The plot should be complemented with suitable axis legends and title."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 386,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x166c82ddb50>"
      ]
     },
     "execution_count": 386,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Write your answer here\n",
    "x = honey['Production']\n",
    "y = honey['Price']\n",
    "\n",
    "plt.scatter(x, y, s=25)\n",
    "plt.title('Honey Sales per Production')\n",
    "plt.xlabel('Production (KG)')\n",
    "plt.ylabel('Price per KG (Â£)')\n",
    "\n",
    "plt.legend(['Price'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(iv) [5 marks]** Using Python and scikit-learn, generate the simple linear regression model for the dataset. Also, report the linear regression equation. Finally, plot the corresponding regression model on the scatter plot generated in (iii)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 367,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost = 0.031 * Producuction + -30.333\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Price per KG')"
      ]
     },
     "execution_count": 367,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Write your answer here\n",
    "honeyX = pd.DataFrame(honey['Production'])\n",
    "price = honey['Price']\n",
    "\n",
    "reg = linear_model.LinearRegression()\n",
    "reg.fit(honeyX, price)\n",
    "\n",
    "print(\"Cost =\", round(float(reg.coef_), 3), \"* Producuction +\", round(float(reg.intercept_), 3))\n",
    "min = np.min(honey['Production'])\n",
    "max = np.max(honey['Production'])\n",
    "\n",
    "honeyPredict = reg.predict(np.arange(min,max).reshape(-1,1))\n",
    "\n",
    "plt.scatter(x, y, s=25)\n",
    "plt.legend(['Price'])\n",
    "plt.plot(np.arange(min,max), honeyPredict.flatten(), color='red')\n",
    "\n",
    "plt.title('Honey Sales per Production')\n",
    "plt.xlabel('Production (KG)')\n",
    "plt.ylabel('Price per KG (Â£)')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(v) [5 marks]** Using Python and scikit-learn, generate a polynomial linear regression model of degree 5 for the dataset. Also, plot the corresponding regression model on the scatter plot generated in (iii). Finally, predict the average price per KG (Â£) for a production of 1010 KG."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 385,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intercept coefficient alpha = -267543.751\n",
      "Regression coefficient beta = [ 0.00000000e+00  9.09220965e-09  5.17918087e-06  2.61772221e-03\n",
      " -3.89804707e-06  1.54786383e-09]\n",
      "Price per KG for 1010 KG is 0.37351197423413396\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Write your answer here\n",
    "polyFeatures5 = PolynomialFeatures(degree=5)\n",
    "\n",
    "xHoneyPoly5 = polyFeatures5.fit_transform(honey['Production'].to_numpy().reshape(-1,1))\n",
    "\n",
    "polyModel5 = linear_model.LinearRegression()\n",
    "polyModel5.fit(xHoneyPoly5, honey['Price'])\n",
    "\n",
    "yHoneyPredicted5 = polyModel5.predict(xHoneyPoly5)\n",
    "\n",
    "yTestPredict5 = polyModel5.predict(polyFeatures5.fit_transform(honey['Year'].to_numpy().reshape(-1,1)))\n",
    "\n",
    "print(\"Intercept coefficient alpha = %.3f\" % (polyModel5.intercept_))\n",
    "print(\"Regression coefficient beta = %s\" % (polyModel5.coef_))\n",
    "\n",
    "plt.scatter(x, y, s=25)\n",
    "plt.legend(['Price'])\n",
    "plt.plot(df['Production'], yHoneyPredicted5, color='red')\n",
    "\n",
    "plt.title('Honey Sales per Production')\n",
    "plt.xlabel('Production (KG)')\n",
    "plt.ylabel('Price per KG (Â£)')\n",
    "\n",
    "print(\"Price per KG for 1010 KG is\", polyModel5.predict(polyFeatures5.fit_transform([ [1010] ]))[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(vi) [5 marks]** Using Python and scikit-learn, calculate the Mean Absolute Error, Mean Square Error, and Root Mean Square Error both for the simple linear regression and polynomial regression models for the following list of production values - average price tuples:[(1010,0.45), (1011,0.36), (1012,0.39), (1013,0.53)]. In no more than two sentences, analyse the results and comment on the quality of the developed linear regression models.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 322,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 0.119\n",
      "MSE: 0.017\n",
      "RMSE: 0.130\n"
     ]
    }
   ],
   "source": [
    "#Write your answer here\n",
    "honeyPredict5 = reg.predict(honeyX)\n",
    "print (\"MAE: {:.3f}\".format(mae(honeyPredict5, honey['Price'])) )\n",
    "print (\"MSE: {:.3f}\".format(mse(honeyPredict5, honey['Price'])) )\n",
    "print (\"RMSE: {:.3f}\".format(np.sqrt(mse(honeyPredict5, honey['Price']))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 3: Data Processing  (25 marks)\n",
    "\n",
    "\n",
    "The Association of Tennis Professionals (ATP) is the governing body organising and managing a wide range of professional tennis tournaments including the four Grand Slams (i.e., Australian Open, French Open, Wimbledon UK, and US Open) and ATP and Masters Cups. \n",
    "\n",
    "In singles tennis matches, two players compete against each other over a number of sets. By winning his/her tennis matches, a player can proceed through the rounds and win the tournament. Each set comprises a sequence of games played with the service alternating between games, ending when the count of games won meets certain criteria. Typically, a player wins a set by winning at least six games and at least two games more than the opponent. Each set consists of a sequence of points played with the same player serving. A game is won by the first player to have won at least four points in total and at least two points more than the opponent. You can read more about the tennis rules at [https://en.wikipedia.org/wiki/Tennis#Manner_of_play](https://en.wikipedia.org/wiki/Tennis#Manner_of_play).\n",
    "\n",
    "DataVision has won a major contract with ATP. The main objective of this contract is to analyse the dataset for the tennis matches played in 2019 and 2020 and extract actionable knowledge the will help ATP to determine whether any changes are needed to the scheduling or structure of its various tournaments. \n",
    "\n",
    "As the head of the Data Science team at DataVision, your task is to guide your team in undertaking this data analysis task.\n",
    "\n",
    "You should use the dataset named \"tennis20192020.csv\" and answer the following data questions using Python 3, Pandas and Matplotlib."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(i) [1 mark]** What are the dimensions of the dataset?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The dimensions of the dataset are (3877, 19)\n"
     ]
    }
   ],
   "source": [
    "#Write your answer here:\n",
    "tennis = pd.read_csv(\"tennis20192020.csv\")\n",
    "\n",
    "print(\"The dimensions of the dataset are\", np.shape(tennis))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(ii) [2 marks]** What does each column mean and what is its datatype?\n",
    "\n",
    "Note: We provide the names of some of these columns. You should complete the rest."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Write your answer here**\n",
    "* **ATP**: Unique identifier code of the tournament (Numerical - discrete)\n",
    "* **Location**: Location of the tournament (Categorical - nominal)\n",
    "* **Tournament**: Tournament that the match was a part of (Categorical - nominal)\n",
    "* **Date**: Date that the match took place on (Categorical - nominal)\n",
    "* **Series**: Series that the match was a part of (Categorical - nominal)\n",
    "* **Court**: Type of court that the match was played on (Categorical - nominal)\n",
    "* **Surface**: Type of surface that the match was played on (Categorical - nominal)\n",
    "* **Round**: Round of the tournament that the match was a part of (Categorical - ordinal)\n",
    "* **BestOf**: Best of sets system that the outcome of the match was determined by (Numerical - discrete)\n",
    "* **Winner**: Winner of the match (Categorical - nominal)\n",
    "* **Loser**: Loser of the match (Categorical - nominal)\n",
    "* **WRank**: Rank of the match winner as of the end of the tournament (Numerical - continuous)\n",
    "* **LRank**: Rank of the match loser as of the end of the tournament (Numerical - continuous)\n",
    "* **WPts**: ATP Entry points of the match winner as of the start of the tournament (Numerical - continuous)\n",
    "* **LPts**: ATP Entry points of the match loser as of the start of the tournament (Numerical - continuous)\n",
    "* **WSets**: Amount of sets won by the match winner (Numerical - discrete)\n",
    "* **LSets**: Amount of sets won by the match loser (Numerical - discrete)\n",
    "* **OddsW**: Average odds of match winner (Numerical - continuous)\n",
    "* **OddsL**: Average odds of match loser (Numerical - continuous)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(iii) [2 marks]** Remove the variables 'WPts' and 'LPts' which are irrelevant for data analysis. Print the new shape of the data frame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3877, 17)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Write your answer here\n",
    "tennisClean = tennis.drop(columns=['WPts','LPts'])\n",
    "np.shape(tennisClean)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(iv) [5 marks]** Is there any missing data? If yes, apply the most appropriate imputation strategy to handle the missing data and print the affected entries after imputation.\n",
    "\n",
    "* For each match in which the number of sets won by each player is missing, assume that the minimum number of sets was played for that match. \n",
    "* For each match in which the odds of match winner/loser is missing, use the average odds for that particular player across the entire dataset.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write your answer here\n",
    "tennisClean['LSets'] = tennisClean['LSets'].fillna(0)\n",
    "\n",
    "for index in tennisClean.index:\n",
    "    tennisClean['WSets'] = tennisClean['WSets'].fillna(tennisClean['BestOf'])\n",
    "\n",
    "#The rest of this question is not worth the marks\n",
    "\n",
    "for index in tennisClean.index:\n",
    "    if tennisClean['WOdds'].isna():\n",
    "        name = tennisClean['Winner']\n",
    "    elif tennisClean['LOdds'].isna():   \n",
    "        name = tennisClean['Loser']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(v) [5 marks]** \n",
    "When Novak Djokovic and Rafael Nadal participated in tournaments, how many matches has each won each against the top 10 best players of the tournament? How many of these have been in the final?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-18-4e7801f534e5>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[0mincr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mindex\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mtennisClean\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m     \u001b[1;32mif\u001b[0m \u001b[0mtennisClean\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'Winner'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'Djokovic N.'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      6\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mtennisClean\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'LRank'\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m<=\u001b[0m \u001b[1;36m10\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m             \u001b[0mincr\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m__nonzero__\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m   1476\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1477\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__nonzero__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1478\u001b[1;33m         raise ValueError(\n\u001b[0m\u001b[0;32m   1479\u001b[0m             \u001b[1;34mf\"The truth value of a {type(self).__name__} is ambiguous. \"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1480\u001b[0m             \u001b[1;34m\"Use a.empty, a.bool(), a.item(), a.any() or a.all().\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()."
     ]
    }
   ],
   "source": [
    "#Write your answer here\n",
    "\n",
    "incr = 0\n",
    "for index in tennisClean.index:\n",
    "    if tennisClean['Winner'] == 'Djokovic N.':\n",
    "        if tennisClean['LRank'] <= 10:\n",
    "            incr += 1\n",
    "print('Djokovic has won', incr, 'Matches against the top 10')\n",
    "\n",
    "incr = 0\n",
    "for index in tennisClean.index:\n",
    "    if tennisClean['Winner'] == 'Nadal R.':\n",
    "        if tennisClean['LRank'] <= 10:\n",
    "            incr += 1\n",
    "print('Nadal has won', incr, 'Matches against the top 10')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(vi) [3 marks]** \n",
    "Which tennis players have won at least 4 titles?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Assuming a title is tournament win"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Nishikori K.\n",
      "Bautista Agut R.\n",
      "Anderson K.\n",
      "Sandgren T.\n",
      "De Minaur A.\n",
      "Djokovic N.\n",
      "Londero J.I.\n",
      "Tsonga J.W.\n",
      "Medvedev D.\n",
      "Cecchinato M.\n",
      "Opelka R.\n",
      "Monfils G.\n",
      "Albot R.\n",
      "Tsitsipas S.\n",
      "Djere L.\n",
      "Kyrgios N.\n",
      "Federer R.\n",
      "Pella G.\n",
      "Thiem D.\n",
      "Garin C.\n",
      "Paire B.\n",
      "Fognini F.\n",
      "Berrettini M.\n",
      "Nadal R.\n",
      "Zverev A.\n",
      "Mannarino A.\n",
      "Lopez F.\n",
      "Sonego L.\n",
      "Fritz T.\n",
      "Jarry N.\n",
      "Isner J.\n",
      "Lajovic D.\n",
      "Ramos-Vinolas A.\n",
      "Basilashvili N.\n",
      "Schwartzman D.\n",
      "Hurkacz H.\n",
      "Carreno Busta P.\n",
      "Murray A.\n",
      "Rublev A.\n",
      "Shapovalov D.\n",
      "Tsitsipas S. \n",
      "Humbert U.\n",
      "Vesely J.\n",
      "Ruud C.\n",
      "Edmund K.\n",
      "Seyboth Wild T.\n",
      "Kecmanovic M.\n",
      "Millman J.\n",
      "Sinner J.\n"
     ]
    }
   ],
   "source": [
    "win = []\n",
    "for x in range(len(tennis['Round'])):\n",
    "    name = False\n",
    "    if tennis['Round'][x] == 'The Final':\n",
    "        for i in win:\n",
    "            if tennis['Winner'][x] in i:\n",
    "                name = True\n",
    "                #print(\"incr\")\n",
    "        if name == False:\n",
    "            win.append([tennis['Winner'][x], 1])\n",
    "#print(win)\n",
    "for i in win:\n",
    "    if i[1] >= 1:\n",
    "        print(i[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(vii) [4 marks]** \n",
    "What percentage of ATP250 and ATP500 matches were won by an outsider player (i.e., a player with higher odds than his/her opponent's)?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write your answer here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(viii) [3 marks]** \n",
    "\n",
    "For each series in the dataset, how many matches were played in each surface type available in indoor and outdoor courts?\n",
    "You can answer this question using either the 'groupby' or 'pivot' commands.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ATP</th>\n",
       "      <th>Location</th>\n",
       "      <th>Tournament</th>\n",
       "      <th>Date</th>\n",
       "      <th>Series</th>\n",
       "      <th>Court</th>\n",
       "      <th>Round</th>\n",
       "      <th>BestOf</th>\n",
       "      <th>Winner</th>\n",
       "      <th>Loser</th>\n",
       "      <th>WRank</th>\n",
       "      <th>LRank</th>\n",
       "      <th>WPts</th>\n",
       "      <th>LPts</th>\n",
       "      <th>WSets</th>\n",
       "      <th>LSets</th>\n",
       "      <th>OddsW</th>\n",
       "      <th>OddsL</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Surface</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Clay</th>\n",
       "      <td>1161</td>\n",
       "      <td>1161</td>\n",
       "      <td>1161</td>\n",
       "      <td>1161</td>\n",
       "      <td>1161</td>\n",
       "      <td>1161</td>\n",
       "      <td>1161</td>\n",
       "      <td>1161</td>\n",
       "      <td>1161</td>\n",
       "      <td>1161</td>\n",
       "      <td>1161</td>\n",
       "      <td>1161</td>\n",
       "      <td>1161</td>\n",
       "      <td>1158</td>\n",
       "      <td>1154</td>\n",
       "      <td>1154</td>\n",
       "      <td>1161</td>\n",
       "      <td>1161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Grass</th>\n",
       "      <td>324</td>\n",
       "      <td>324</td>\n",
       "      <td>324</td>\n",
       "      <td>324</td>\n",
       "      <td>324</td>\n",
       "      <td>324</td>\n",
       "      <td>324</td>\n",
       "      <td>324</td>\n",
       "      <td>324</td>\n",
       "      <td>324</td>\n",
       "      <td>324</td>\n",
       "      <td>324</td>\n",
       "      <td>324</td>\n",
       "      <td>323</td>\n",
       "      <td>322</td>\n",
       "      <td>322</td>\n",
       "      <td>324</td>\n",
       "      <td>324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hard</th>\n",
       "      <td>2392</td>\n",
       "      <td>2392</td>\n",
       "      <td>2392</td>\n",
       "      <td>2392</td>\n",
       "      <td>2392</td>\n",
       "      <td>2392</td>\n",
       "      <td>2392</td>\n",
       "      <td>2392</td>\n",
       "      <td>2392</td>\n",
       "      <td>2392</td>\n",
       "      <td>2392</td>\n",
       "      <td>2392</td>\n",
       "      <td>2388</td>\n",
       "      <td>2378</td>\n",
       "      <td>2374</td>\n",
       "      <td>2374</td>\n",
       "      <td>2391</td>\n",
       "      <td>2391</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          ATP  Location  Tournament  Date  Series  Court  Round  BestOf  \\\n",
       "Surface                                                                   \n",
       "Clay     1161      1161        1161  1161    1161   1161   1161    1161   \n",
       "Grass     324       324         324   324     324    324    324     324   \n",
       "Hard     2392      2392        2392  2392    2392   2392   2392    2392   \n",
       "\n",
       "         Winner  Loser  WRank  LRank  WPts  LPts  WSets  LSets  OddsW  OddsL  \n",
       "Surface                                                                       \n",
       "Clay       1161   1161   1161   1161  1161  1158   1154   1154   1161   1161  \n",
       "Grass       324    324    324    324   324   323    322    322    324    324  \n",
       "Hard       2392   2392   2392   2392  2388  2378   2374   2374   2391   2391  "
      ]
     },
     "execution_count": 336,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Write your answer here\n",
    "tennis.groupby('Surface').count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Question 4: Hypothesis Testing  (25 marks)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The service team at the Golden Lion restaurant in York collects the tips given by their customers and puts them in a common safe place. At the end of every week, the total amount is split equally between members of the service team. Recently, the team started recording information about the tips received, including the total bill, the gender of the bill payer and the number of customers served per order.\n",
    "\n",
    "The service team is interested in analysing this dataset and identifying whether there are factors that affect the amount of tips they receive. To this end, DataVision has been tasked to help and provide their insights.\n",
    "\n",
    "You should use the dataset named \"goldenLionTips.csv\" and answer the following data questions using Python 3, Pandas, Matplotlib and Scipy."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(i) [2 marks]** The service team believes that customers give a higher tip when they come for dinner rather than lunch. State the Null and Alternative hypotheses that DataVision would need to test to evaluate this situation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Write your answer here**\n",
    "* x_b: tips from lunch\n",
    "* x_a: tips from dinner\n",
    "* H0: x_b = x_a\n",
    "* H1: x_b != x_a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(ii) [4 marks]** Execute the appropriate test and report the result. You must show your calculations, i.e., calculate the result analytically, but you may use the Scipy library to check your results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write your answer here\n",
    "tips = pd.read_csv('goldenLionTips.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(iii) [2 marks]** Draw appropriate conclusions making explicit reference to the critical value for a significance level Î±=0.05."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write your answer here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(iv) [5 marks]** The team has observed that a different amount of tip is given depending on the number of customers served per order (group size). To analyse this hypothesis, DataVision partitions the orders into 'small' orders, i.e., involving up to 2 customers, 'medium' orders, i.e., with 3 or 4 customers, and 'large' orders, with 5 or more customers.\n",
    "\n",
    "Perform the appropriate test to evaluate the hypotheses for significance level ð¼=0.05 . You must show your calculations, i.e., calculate the result analytically, but you may use the Scipy library to check your results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write your answer here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(v) [4 marks]** Plot the distributions for the 'small', 'medium' and 'large' orders."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 400x300 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Write your answer here\n",
    "small = tips.query('customersServed <= 2')\n",
    "\n",
    "plt.figure(figsize=(4,3), dpi=100)\n",
    "ax = small['tip'].hist(bins=24)\n",
    "ax.set_title(\"Histogram for small order tips\")\n",
    "ax.set_xlabel('tip')\n",
    "ax.set_ylabel('tip (Count)')\n",
    "ax.grid(False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 400x300 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "medium = tips.query('3<= customersServed <= 4')\n",
    "\n",
    "plt.figure(figsize=(4,3), dpi=100)\n",
    "ax = medium['tip'].hist(bins=40)\n",
    "ax.set_title(\"Histogram for medium order tips\")\n",
    "ax.set_xlabel('tip')\n",
    "ax.set_ylabel('tip (Count)')\n",
    "ax.grid(False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 400x300 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "large = tips.query('customersServed >= 5')\n",
    "\n",
    "plt.figure(figsize=(4,3), dpi=100)\n",
    "ax = small['tip'].hist(bins=24)\n",
    "ax.set_title(\"Histogram for large order tips\")\n",
    "ax.set_xlabel('tip')\n",
    "ax.set_ylabel('tip (Count)')\n",
    "ax.grid(False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(vi) [3 marks]** Execute a post hoc analysis using the Bonferroni correction to identify the pairs which exhibit statistically significant difference."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write your answer here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(vii) [3 marks]** Which entries may be reported as outliers using the IQR outlier detection method?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write your answer here\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**(viii) [2 marks]** Produce a boxplot to confirm the findings from (vii).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Write your answer here\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
